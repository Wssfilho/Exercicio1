import numpy as np

def tsp_custo(custos, n, B):
    """
    Resolve o PCV com restrição de custo usando programação dinâmica (sem bitmask).

    Args:
        custos: Matriz de custos (n x n) com custos[i][j] sendo o custo de i para j.
        n: Número de cidades.
        B: Orçamento máximo.

    Returns:
        Custo mínimo da rota ou np.inf se não houver rota válida.
    """
    
    # Inicializa a tabela de DP
    dp = np.full((n, n, B + 1), np.inf)  
    # dp[i][j][k] = custo mínimo para visitar o subconjunto de cidades {0, ..., i} terminando em j, com custo k

    # Caso base: Começando na cidade 0
    for cidade in range(n):
        dp[cidade][cidade][custos[0][cidade]] = custos[0][cidade]  
    
    # Preenche a tabela de DP iterativamente
    for r in range(2, n):
        for subset in combinations(range(1, n), r - 1):
            subset = [0] + list(subset)  # Adiciona a cidade 0 ao subconjunto
            for next_cidade in range(1, n):
                if next_cidade not in subset:
                    for current_cidade in subset:
                        if current_cidade != next_cidade:
                            for custo_prev in range(B - custos[current_cidade][next_cidade] + 1):
                                dp[next_cidade][tuple(subset)][custo_prev + custos[current_cidade][next_cidade]] = min(
                                    dp[next_cidade][tuple(subset)][custo_prev + custos[current_cidade][next_cidade]],
                                    dp[current_cidade][tuple(subset[:subset.index(current_cidade)] + subset[subset.index(current_cidade)+1:])][custo_prev]
                                )

    # Custo mínimo de retornar para a cidade 0
    custo_minimo = min(dp[0][tuple(range(1, n))])

    return custo_minimo if custo_minimo != np.inf else None

# Função auxiliar para gerar combinações
def combinations(iterable, r):
    pool = tuple(iterable)
    n = len(pool)
    if r > n:
        return
    indices = list(range(r))
    yield tuple(pool[i] for i in indices)
    while True:
        for i in reversed(range(r)):
            if indices[i] != i + n - r:
                break
        else:
            return
        indices[i] += 1
        for j in range(i+1, r):
            indices[j] = indices[j-1] + 1
        yield tuple(pool[i] for i in indices)

# Exemplo de uso (o mesmo do código anterior)
# ... (o código para criar a matriz 'custos', 'n' e 'B' permanece o mesmo)
distancias = [
    [0, 1, 2, 5],
    [1, 0, 6, 4],
    [2, 6, 0, 4],
    [5, 4, 4, 0]
]
custos_cidades = [10, 20, 30, 40]
orcamento = 10
print(tsp_custo(distancias, len(distancias), orcamento)) 